
nameOverride: "prowlarr"
fullnameOverride: "prowlarr"

replicaCount: 1

deploymentAnnotations: {}
podAnnotations: {}

podSecurityContext: {}
  # runAsUser: 1000
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: topology.kubernetes.io/zone
  #             operator: In
  #             values:
  #               - us-east-1a
nodeSelector: {}

image:
  repository: "lscr.io/linuxserver/prowlarr"
  tag: "latest"
  pullPolicy: IfNotPresent
  imagePullSecrets: []
    # - name: myRegistryKey

container:
  command: []
  args: []

  ports:
    - containerPort: 9696
      name: http
      protocol: TCP

# env:
#   key: value

config:
  data:
    TZ: "Asia/Kolkata"

# envFrom:
#   - configMapRef:
#       name: prowlarr-config-map
#   - secretRef:
#       name: app-data-secret

resources:
  requests:
    cpu: 50m
    memory: 128Mi
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe: |
  httpGet:
    path: /health
    port: 9696
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe: |
  httpGet:
    path: /health
    port: 9696
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe: |
  httpGet:
    path: /health
    port: 9696
  initialDelaySeconds: 30
  timeoutSeconds: 1
  failureThreshold: 60
  periodSeconds: 5

daemonset:
  enabled: false

storage:
  enabled: true
  # container mount path
  # mountPath: ""
  # Storage Class related values
  createStorageClass: false
  # storageClassName: ""

  # Use existing storage class. createStorageClass must be false
  existingClass: "longhorn"
  
  # isDefault: false
  # provisioner: ""
  # parameters: {}
  # allowVolumeExpansion: true
  # volumeBindingMode: WaitForFirstConsumer
  # reclaimPolicy: Retain

  mediaPersistentVolume:
    createPersistentVolume: false
  #   name: "prowlarr-media-nfs-pv"
  #   capacity: 2Ti
  #   accessModes:
  #     - ReadWriteMany
  #   nfs:
  #     server: 192.168.0.104
  #     path: "/mnt/MEDIA-SERVER-STORAGE/jellyfin"
    
  mediaPersistentVolumeClaim:
    createPersistentVolumeClaim: false
    # name: ""
    # use existing claim if not creating a new one. createPersistentVolumeClaim must be false
    # existingClaim: "jellyfin-media-nfs-pvc"
    # capacity: 2Ti
    # accessModes:
    #   - ReadWriteMany
  
  
  configPersistentVolumeClaim:
    createPersistentVolumeClaim: true
    name: "prowlarr-config-pvc"
    # use existing claim if not creating a new one. createPersistentVolumeClaim must be false
    # existingClaim: ""
    capacity: 3Gi
    accessModes:
      - ReadWriteMany

  # Volume Configuration
  volumeMounts:
    - name: config
      mountPath: /config
    # - name: media
    #   mountPath: /data
    #   readOnly: false

  volumes:
    - name: config
      persistentVolumeClaim:
        claimName: prowlarr-config-pvc
    # - name: media
    #   persistentVolumeClaim:
    #     claimName: jellyfin-media-nfs-pvc

service:
  type: ClusterIP
  ports:
  - port: 9696
    targetPort: 9696
    protocol: TCP
    name: http

containerPort: 9696

ingress:
  enabled: false

autoscaling:
  enabled: false
  labels: {}
  minReplicas: 1
  maxReplicas: 3
  cpuThreshold: 70

  metrics: []
  behavior: {}

monitoring:
  serviceMonitor:
    enabled: false
    interval: 30s
    path: /metrics